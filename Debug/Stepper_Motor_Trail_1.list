
Stepper_Motor_Trail_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002940  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002acc  08002acc  00012acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b0c  08002b0c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b0c  08002b0c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b0c  08002b0c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b0c  08002b0c  00012b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b10  08002b10  00012b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002b20  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002b20  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000adef  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016fa  00000000  00000000  0002ae2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0002c528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a30  00000000  00000000  0002d010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000210cb  00000000  00000000  0002da40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af4e  00000000  00000000  0004eb0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd474  00000000  00000000  00059a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00126ecd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d30  00000000  00000000  00126f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002ab4 	.word	0x08002ab4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002ab4 	.word	0x08002ab4

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  HAL_Init();
 80001d2:	f000 faf4 	bl	80007be <HAL_Init>
  SystemClock_Config();
 80001d6:	f000 f81f 	bl	8000218 <SystemClock_Config>

  MX_GPIO_Init();
 80001da:	f000 f91d 	bl	8000418 <MX_GPIO_Init>
  MX_TIM1_Init();
 80001de:	f000 f86d 	bl	80002bc <MX_TIM1_Init>
  microstepping(0, 0, 0);
 80001e2:	2200      	movs	r2, #0
 80001e4:	2100      	movs	r1, #0
 80001e6:	2000      	movs	r0, #0
 80001e8:	f000 f98e 	bl	8000508 <microstepping>
  enable(false);
 80001ec:	2000      	movs	r0, #0
 80001ee:	f000 f9c5 	bl	800057c <enable>

  for(int i = 0; i < 20; ++i){
 80001f2:	2300      	movs	r3, #0
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	e009      	b.n	800020c <main+0x40>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001f8:	2100      	movs	r1, #0
 80001fa:	4806      	ldr	r0, [pc, #24]	; (8000214 <main+0x48>)
 80001fc:	f001 fcfa 	bl	8001bf4 <HAL_TIM_PWM_Start>
    HAL_Delay(100);
 8000200:	2064      	movs	r0, #100	; 0x64
 8000202:	f000 fb51 	bl	80008a8 <HAL_Delay>
  for(int i = 0; i < 20; ++i){
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	3301      	adds	r3, #1
 800020a:	607b      	str	r3, [r7, #4]
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	2b13      	cmp	r3, #19
 8000210:	ddf2      	ble.n	80001f8 <main+0x2c>

  }
  while (1)
 8000212:	e7fe      	b.n	8000212 <main+0x46>
 8000214:	20000028 	.word	0x20000028

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b096      	sub	sp, #88	; 0x58
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0314 	add.w	r3, r7, #20
 8000222:	2244      	movs	r2, #68	; 0x44
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f002 fc3c 	bl	8002aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	463b      	mov	r3, r7
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800023a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800023e:	f000 fddd 	bl	8000dfc <HAL_PWREx_ControlVoltageScaling>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000248:	f000 f9b3 	bl	80005b2 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800024c:	2310      	movs	r3, #16
 800024e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000250:	2301      	movs	r3, #1
 8000252:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000254:	2300      	movs	r3, #0
 8000256:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000258:	2360      	movs	r3, #96	; 0x60
 800025a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025c:	2302      	movs	r3, #2
 800025e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000260:	2301      	movs	r3, #1
 8000262:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000264:	2301      	movs	r3, #1
 8000266:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000268:	2328      	movs	r3, #40	; 0x28
 800026a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800026c:	2307      	movs	r3, #7
 800026e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000270:	2302      	movs	r3, #2
 8000272:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000274:	2302      	movs	r3, #2
 8000276:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	f107 0314 	add.w	r3, r7, #20
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fe13 	bl	8000ea8 <HAL_RCC_OscConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000288:	f000 f993 	bl	80005b2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028c:	230f      	movs	r3, #15
 800028e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000290:	2303      	movs	r3, #3
 8000292:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002a0:	463b      	mov	r3, r7
 80002a2:	2104      	movs	r1, #4
 80002a4:	4618      	mov	r0, r3
 80002a6:	f001 fa1f 	bl	80016e8 <HAL_RCC_ClockConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002b0:	f000 f97f 	bl	80005b2 <Error_Handler>
  }
}
 80002b4:	bf00      	nop
 80002b6:	3758      	adds	r7, #88	; 0x58
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b09a      	sub	sp, #104	; 0x68
 80002c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
 80002ea:	611a      	str	r2, [r3, #16]
 80002ec:	615a      	str	r2, [r3, #20]
 80002ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	222c      	movs	r2, #44	; 0x2c
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f002 fbd4 	bl	8002aa4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002fc:	4b44      	ldr	r3, [pc, #272]	; (8000410 <MX_TIM1_Init+0x154>)
 80002fe:	4a45      	ldr	r2, [pc, #276]	; (8000414 <MX_TIM1_Init+0x158>)
 8000300:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39999;
 8000302:	4b43      	ldr	r3, [pc, #268]	; (8000410 <MX_TIM1_Init+0x154>)
 8000304:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000308:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800030a:	4b41      	ldr	r3, [pc, #260]	; (8000410 <MX_TIM1_Init+0x154>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8000310:	4b3f      	ldr	r3, [pc, #252]	; (8000410 <MX_TIM1_Init+0x154>)
 8000312:	22c8      	movs	r2, #200	; 0xc8
 8000314:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000316:	4b3e      	ldr	r3, [pc, #248]	; (8000410 <MX_TIM1_Init+0x154>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800031c:	4b3c      	ldr	r3, [pc, #240]	; (8000410 <MX_TIM1_Init+0x154>)
 800031e:	2200      	movs	r2, #0
 8000320:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000322:	4b3b      	ldr	r3, [pc, #236]	; (8000410 <MX_TIM1_Init+0x154>)
 8000324:	2200      	movs	r2, #0
 8000326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000328:	4839      	ldr	r0, [pc, #228]	; (8000410 <MX_TIM1_Init+0x154>)
 800032a:	f001 fbab 	bl	8001a84 <HAL_TIM_Base_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000334:	f000 f93d 	bl	80005b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800033c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800033e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000342:	4619      	mov	r1, r3
 8000344:	4832      	ldr	r0, [pc, #200]	; (8000410 <MX_TIM1_Init+0x154>)
 8000346:	f001 fe43 	bl	8001fd0 <HAL_TIM_ConfigClockSource>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000350:	f000 f92f 	bl	80005b2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000354:	482e      	ldr	r0, [pc, #184]	; (8000410 <MX_TIM1_Init+0x154>)
 8000356:	f001 fbec 	bl	8001b32 <HAL_TIM_PWM_Init>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000360:	f000 f927 	bl	80005b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000364:	2300      	movs	r3, #0
 8000366:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000368:	2300      	movs	r3, #0
 800036a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800036c:	2300      	movs	r3, #0
 800036e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000370:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000374:	4619      	mov	r1, r3
 8000376:	4826      	ldr	r0, [pc, #152]	; (8000410 <MX_TIM1_Init+0x154>)
 8000378:	f002 fa92 	bl	80028a0 <HAL_TIMEx_MasterConfigSynchronization>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000382:	f000 f916 	bl	80005b2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000386:	2360      	movs	r3, #96	; 0x60
 8000388:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500;
 800038a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800038e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000390:	2300      	movs	r3, #0
 8000392:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000394:	2300      	movs	r3, #0
 8000396:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000398:	2300      	movs	r3, #0
 800039a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800039c:	2300      	movs	r3, #0
 800039e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003a0:	2300      	movs	r3, #0
 80003a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003a8:	2200      	movs	r2, #0
 80003aa:	4619      	mov	r1, r3
 80003ac:	4818      	ldr	r0, [pc, #96]	; (8000410 <MX_TIM1_Init+0x154>)
 80003ae:	f001 fcff 	bl	8001db0 <HAL_TIM_PWM_ConfigChannel>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80003b8:	f000 f8fb 	bl	80005b2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003bc:	2300      	movs	r3, #0
 80003be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80003da:	2300      	movs	r3, #0
 80003dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80003de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80003e2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80003e4:	2300      	movs	r3, #0
 80003e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003e8:	2300      	movs	r3, #0
 80003ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	4619      	mov	r1, r3
 80003f0:	4807      	ldr	r0, [pc, #28]	; (8000410 <MX_TIM1_Init+0x154>)
 80003f2:	f002 fabb 	bl	800296c <HAL_TIMEx_ConfigBreakDeadTime>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80003fc:	f000 f8d9 	bl	80005b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000400:	4803      	ldr	r0, [pc, #12]	; (8000410 <MX_TIM1_Init+0x154>)
 8000402:	f000 f91f 	bl	8000644 <HAL_TIM_MspPostInit>

}
 8000406:	bf00      	nop
 8000408:	3768      	adds	r7, #104	; 0x68
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000028 	.word	0x20000028
 8000414:	40012c00 	.word	0x40012c00

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041e:	f107 030c 	add.w	r3, r7, #12
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
 800042c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042e:	4b33      	ldr	r3, [pc, #204]	; (80004fc <MX_GPIO_Init+0xe4>)
 8000430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000432:	4a32      	ldr	r2, [pc, #200]	; (80004fc <MX_GPIO_Init+0xe4>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800043a:	4b30      	ldr	r3, [pc, #192]	; (80004fc <MX_GPIO_Init+0xe4>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000446:	4b2d      	ldr	r3, [pc, #180]	; (80004fc <MX_GPIO_Init+0xe4>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	4a2c      	ldr	r2, [pc, #176]	; (80004fc <MX_GPIO_Init+0xe4>)
 800044c:	f043 0302 	orr.w	r3, r3, #2
 8000450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000452:	4b2a      	ldr	r3, [pc, #168]	; (80004fc <MX_GPIO_Init+0xe4>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	f003 0302 	and.w	r3, r3, #2
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800045e:	4b27      	ldr	r3, [pc, #156]	; (80004fc <MX_GPIO_Init+0xe4>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	4a26      	ldr	r2, [pc, #152]	; (80004fc <MX_GPIO_Init+0xe4>)
 8000464:	f043 0304 	orr.w	r3, r3, #4
 8000468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800046a:	4b24      	ldr	r3, [pc, #144]	; (80004fc <MX_GPIO_Init+0xe4>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046e:	f003 0304 	and.w	r3, r3, #4
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	f240 610c 	movw	r1, #1548	; 0x60c
 800047c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000480:	f000 fc96 	bl	8000db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_11, GPIO_PIN_RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	f640 0101 	movw	r1, #2049	; 0x801
 800048a:	481d      	ldr	r0, [pc, #116]	; (8000500 <MX_GPIO_Init+0xe8>)
 800048c:	f000 fc90 	bl	8000db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	2140      	movs	r1, #64	; 0x40
 8000494:	481b      	ldr	r0, [pc, #108]	; (8000504 <MX_GPIO_Init+0xec>)
 8000496:	f000 fc8b 	bl	8000db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10;
 800049a:	f240 630c 	movw	r3, #1548	; 0x60c
 800049e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a0:	2301      	movs	r3, #1
 80004a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ac:	f107 030c 	add.w	r3, r7, #12
 80004b0:	4619      	mov	r1, r3
 80004b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b6:	f000 fb01 	bl	8000abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11;
 80004ba:	f640 0301 	movw	r3, #2049	; 0x801
 80004be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c0:	2301      	movs	r3, #1
 80004c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004cc:	f107 030c 	add.w	r3, r7, #12
 80004d0:	4619      	mov	r1, r3
 80004d2:	480b      	ldr	r0, [pc, #44]	; (8000500 <MX_GPIO_Init+0xe8>)
 80004d4:	f000 faf2 	bl	8000abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004d8:	2340      	movs	r3, #64	; 0x40
 80004da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004dc:	2301      	movs	r3, #1
 80004de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004e8:	f107 030c 	add.w	r3, r7, #12
 80004ec:	4619      	mov	r1, r3
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_GPIO_Init+0xec>)
 80004f0:	f000 fae4 	bl	8000abc <HAL_GPIO_Init>

}
 80004f4:	bf00      	nop
 80004f6:	3720      	adds	r7, #32
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40021000 	.word	0x40021000
 8000500:	48000400 	.word	0x48000400
 8000504:	48000800 	.word	0x48000800

08000508 <microstepping>:

/* USER CODE BEGIN 4 */
void microstepping(uint16_t l_mode0, uint16_t l_mode1, uint16_t l_mode2){
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	80fb      	strh	r3, [r7, #6]
 8000512:	460b      	mov	r3, r1
 8000514:	80bb      	strh	r3, [r7, #4]
 8000516:	4613      	mov	r3, r2
 8000518:	807b      	strh	r3, [r7, #2]
  if(l_mode0){
 800051a:	88fb      	ldrh	r3, [r7, #6]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d005      	beq.n	800052c <microstepping+0x24>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000520:	2201      	movs	r2, #1
 8000522:	2101      	movs	r1, #1
 8000524:	4814      	ldr	r0, [pc, #80]	; (8000578 <microstepping+0x70>)
 8000526:	f000 fc43 	bl	8000db0 <HAL_GPIO_WritePin>
 800052a:	e004      	b.n	8000536 <microstepping+0x2e>
  }
  else{
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2101      	movs	r1, #1
 8000530:	4811      	ldr	r0, [pc, #68]	; (8000578 <microstepping+0x70>)
 8000532:	f000 fc3d 	bl	8000db0 <HAL_GPIO_WritePin>
  }
  if(l_mode1){
 8000536:	88bb      	ldrh	r3, [r7, #4]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d005      	beq.n	8000548 <microstepping+0x40>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2101      	movs	r1, #1
 8000540:	480d      	ldr	r0, [pc, #52]	; (8000578 <microstepping+0x70>)
 8000542:	f000 fc35 	bl	8000db0 <HAL_GPIO_WritePin>
 8000546:	e004      	b.n	8000552 <microstepping+0x4a>
  }
  else{
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	2101      	movs	r1, #1
 800054c:	480a      	ldr	r0, [pc, #40]	; (8000578 <microstepping+0x70>)
 800054e:	f000 fc2f 	bl	8000db0 <HAL_GPIO_WritePin>
  }
  if(l_mode2){
 8000552:	887b      	ldrh	r3, [r7, #2]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d005      	beq.n	8000564 <microstepping+0x5c>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000558:	2201      	movs	r2, #1
 800055a:	2101      	movs	r1, #1
 800055c:	4806      	ldr	r0, [pc, #24]	; (8000578 <microstepping+0x70>)
 800055e:	f000 fc27 	bl	8000db0 <HAL_GPIO_WritePin>
  }
  else{
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
  }
}
 8000562:	e004      	b.n	800056e <microstepping+0x66>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	2101      	movs	r1, #1
 8000568:	4803      	ldr	r0, [pc, #12]	; (8000578 <microstepping+0x70>)
 800056a:	f000 fc21 	bl	8000db0 <HAL_GPIO_WritePin>
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	48000400 	.word	0x48000400

0800057c <enable>:

void enable(bool l_flag){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
  if(l_flag){
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d007      	beq.n	800059c <enable+0x20>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800058c:	2201      	movs	r2, #1
 800058e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000596:	f000 fc0b 	bl	8000db0 <HAL_GPIO_WritePin>
  }
  else{
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
  }
}
 800059a:	e006      	b.n	80005aa <enable+0x2e>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a6:	f000 fc03 	bl	8000db0 <HAL_GPIO_WritePin>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b6:	b672      	cpsid	i
}
 80005b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ba:	e7fe      	b.n	80005ba <Error_Handler+0x8>

080005bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <HAL_MspInit+0x44>)
 80005c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005c6:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <HAL_MspInit+0x44>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6613      	str	r3, [r2, #96]	; 0x60
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <HAL_MspInit+0x44>)
 80005d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <HAL_MspInit+0x44>)
 80005dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005de:	4a08      	ldr	r2, [pc, #32]	; (8000600 <HAL_MspInit+0x44>)
 80005e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e4:	6593      	str	r3, [r2, #88]	; 0x58
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <HAL_MspInit+0x44>)
 80005e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000

08000604 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a0a      	ldr	r2, [pc, #40]	; (800063c <HAL_TIM_Base_MspInit+0x38>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d10b      	bne.n	800062e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000616:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <HAL_TIM_Base_MspInit+0x3c>)
 8000618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800061a:	4a09      	ldr	r2, [pc, #36]	; (8000640 <HAL_TIM_Base_MspInit+0x3c>)
 800061c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000620:	6613      	str	r3, [r2, #96]	; 0x60
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <HAL_TIM_Base_MspInit+0x3c>)
 8000624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40012c00 	.word	0x40012c00
 8000640:	40021000 	.word	0x40021000

08000644 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a12      	ldr	r2, [pc, #72]	; (80006ac <HAL_TIM_MspPostInit+0x68>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d11d      	bne.n	80006a2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_TIM_MspPostInit+0x6c>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	4a11      	ldr	r2, [pc, #68]	; (80006b0 <HAL_TIM_MspPostInit+0x6c>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <HAL_TIM_MspPostInit+0x6c>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800067e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000682:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000684:	2302      	movs	r3, #2
 8000686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000690:	2301      	movs	r3, #1
 8000692:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	4619      	mov	r1, r3
 800069a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069e:	f000 fa0d 	bl	8000abc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80006a2:	bf00      	nop
 80006a4:	3720      	adds	r7, #32
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40012c00 	.word	0x40012c00
 80006b0:	40021000 	.word	0x40021000

080006b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <NMI_Handler+0x4>

080006ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006be:	e7fe      	b.n	80006be <HardFault_Handler+0x4>

080006c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <MemManage_Handler+0x4>

080006c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <BusFault_Handler+0x4>

080006cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <UsageFault_Handler+0x4>

080006d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr

080006ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000700:	f000 f8b2 	bl	8000868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}

08000708 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <SystemInit+0x5c>)
 800070e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000712:	4a14      	ldr	r2, [pc, #80]	; (8000764 <SystemInit+0x5c>)
 8000714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <SystemInit+0x60>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a11      	ldr	r2, [pc, #68]	; (8000768 <SystemInit+0x60>)
 8000722:	f043 0301 	orr.w	r3, r3, #1
 8000726:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <SystemInit+0x60>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <SystemInit+0x60>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a0d      	ldr	r2, [pc, #52]	; (8000768 <SystemInit+0x60>)
 8000734:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000738:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800073c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <SystemInit+0x60>)
 8000740:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000744:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <SystemInit+0x60>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a07      	ldr	r2, [pc, #28]	; (8000768 <SystemInit+0x60>)
 800074c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000750:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <SystemInit+0x60>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000ed00 	.word	0xe000ed00
 8000768:	40021000 	.word	0x40021000

0800076c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800076c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000770:	f7ff ffca 	bl	8000708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000774:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000776:	e003      	b.n	8000780 <LoopCopyDataInit>

08000778 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800077a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800077c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800077e:	3104      	adds	r1, #4

08000780 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000780:	480a      	ldr	r0, [pc, #40]	; (80007ac <LoopForever+0xa>)
	ldr	r3, =_edata
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000784:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000786:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000788:	d3f6      	bcc.n	8000778 <CopyDataInit>
	ldr	r2, =_sbss
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800078c:	e002      	b.n	8000794 <LoopFillZerobss>

0800078e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800078e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000790:	f842 3b04 	str.w	r3, [r2], #4

08000794 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <LoopForever+0x16>)
	cmp	r2, r3
 8000796:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000798:	d3f9      	bcc.n	800078e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800079a:	f002 f95f 	bl	8002a5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800079e:	f7ff fd15 	bl	80001cc <main>

080007a2 <LoopForever>:

LoopForever:
    b LoopForever
 80007a2:	e7fe      	b.n	80007a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007a4:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 80007a8:	08002b14 	.word	0x08002b14
	ldr	r0, =_sdata
 80007ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80007b0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80007b4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80007b8:	20000078 	.word	0x20000078

080007bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007bc:	e7fe      	b.n	80007bc <ADC1_IRQHandler>

080007be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007c4:	2300      	movs	r3, #0
 80007c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c8:	2003      	movs	r0, #3
 80007ca:	f000 f943 	bl	8000a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007ce:	200f      	movs	r0, #15
 80007d0:	f000 f80e 	bl	80007f0 <HAL_InitTick>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d002      	beq.n	80007e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007da:	2301      	movs	r3, #1
 80007dc:	71fb      	strb	r3, [r7, #7]
 80007de:	e001      	b.n	80007e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007e0:	f7ff feec 	bl	80005bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007e4:	79fb      	ldrb	r3, [r7, #7]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007f8:	2300      	movs	r3, #0
 80007fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007fc:	4b17      	ldr	r3, [pc, #92]	; (800085c <HAL_InitTick+0x6c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d023      	beq.n	800084c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <HAL_InitTick+0x70>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <HAL_InitTick+0x6c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4619      	mov	r1, r3
 800080e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000812:	fbb3 f3f1 	udiv	r3, r3, r1
 8000816:	fbb2 f3f3 	udiv	r3, r2, r3
 800081a:	4618      	mov	r0, r3
 800081c:	f000 f941 	bl	8000aa2 <HAL_SYSTICK_Config>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d10f      	bne.n	8000846 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b0f      	cmp	r3, #15
 800082a:	d809      	bhi.n	8000840 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800082c:	2200      	movs	r2, #0
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000834:	f000 f919 	bl	8000a6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000838:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <HAL_InitTick+0x74>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6013      	str	r3, [r2, #0]
 800083e:	e007      	b.n	8000850 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000840:	2301      	movs	r3, #1
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e004      	b.n	8000850 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	73fb      	strb	r3, [r7, #15]
 800084a:	e001      	b.n	8000850 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800084c:	2301      	movs	r3, #1
 800084e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000850:	7bfb      	ldrb	r3, [r7, #15]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000008 	.word	0x20000008
 8000860:	20000000 	.word	0x20000000
 8000864:	20000004 	.word	0x20000004

08000868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_IncTick+0x20>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_IncTick+0x24>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4413      	add	r3, r2
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <HAL_IncTick+0x24>)
 800087a:	6013      	str	r3, [r2, #0]
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	20000008 	.word	0x20000008
 800088c:	20000074 	.word	0x20000074

08000890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  return uwTick;
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <HAL_GetTick+0x14>)
 8000896:	681b      	ldr	r3, [r3, #0]
}
 8000898:	4618      	mov	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000074 	.word	0x20000074

080008a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b0:	f7ff ffee 	bl	8000890 <HAL_GetTick>
 80008b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008c0:	d005      	beq.n	80008ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <HAL_Delay+0x44>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	461a      	mov	r2, r3
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	4413      	add	r3, r2
 80008cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008ce:	bf00      	nop
 80008d0:	f7ff ffde 	bl	8000890 <HAL_GetTick>
 80008d4:	4602      	mov	r2, r0
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d8f7      	bhi.n	80008d0 <HAL_Delay+0x28>
  {
  }
}
 80008e0:	bf00      	nop
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000008 	.word	0x20000008

080008f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <__NVIC_SetPriorityGrouping+0x44>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800090c:	4013      	ands	r3, r2
 800090e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800091c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000922:	4a04      	ldr	r2, [pc, #16]	; (8000934 <__NVIC_SetPriorityGrouping+0x44>)
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	60d3      	str	r3, [r2, #12]
}
 8000928:	bf00      	nop
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <__NVIC_GetPriorityGrouping+0x18>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	0a1b      	lsrs	r3, r3, #8
 8000942:	f003 0307 	and.w	r3, r3, #7
}
 8000946:	4618      	mov	r0, r3
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000964:	2b00      	cmp	r3, #0
 8000966:	db0a      	blt.n	800097e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	b2da      	uxtb	r2, r3
 800096c:	490c      	ldr	r1, [pc, #48]	; (80009a0 <__NVIC_SetPriority+0x4c>)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	0112      	lsls	r2, r2, #4
 8000974:	b2d2      	uxtb	r2, r2
 8000976:	440b      	add	r3, r1
 8000978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800097c:	e00a      	b.n	8000994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4908      	ldr	r1, [pc, #32]	; (80009a4 <__NVIC_SetPriority+0x50>)
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	f003 030f 	and.w	r3, r3, #15
 800098a:	3b04      	subs	r3, #4
 800098c:	0112      	lsls	r2, r2, #4
 800098e:	b2d2      	uxtb	r2, r2
 8000990:	440b      	add	r3, r1
 8000992:	761a      	strb	r2, [r3, #24]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000e100 	.word	0xe000e100
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b089      	sub	sp, #36	; 0x24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	f1c3 0307 	rsb	r3, r3, #7
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	bf28      	it	cs
 80009c6:	2304      	movcs	r3, #4
 80009c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	3304      	adds	r3, #4
 80009ce:	2b06      	cmp	r3, #6
 80009d0:	d902      	bls.n	80009d8 <NVIC_EncodePriority+0x30>
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3b03      	subs	r3, #3
 80009d6:	e000      	b.n	80009da <NVIC_EncodePriority+0x32>
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	43da      	mvns	r2, r3
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	401a      	ands	r2, r3
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	fa01 f303 	lsl.w	r3, r1, r3
 80009fa:	43d9      	mvns	r1, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a00:	4313      	orrs	r3, r2
         );
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3724      	adds	r7, #36	; 0x24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
	...

08000a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a20:	d301      	bcc.n	8000a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a22:	2301      	movs	r3, #1
 8000a24:	e00f      	b.n	8000a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <SysTick_Config+0x40>)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a2e:	210f      	movs	r1, #15
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a34:	f7ff ff8e 	bl	8000954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <SysTick_Config+0x40>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3e:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <SysTick_Config+0x40>)
 8000a40:	2207      	movs	r2, #7
 8000a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	e000e010 	.word	0xe000e010

08000a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff ff47 	bl	80008f0 <__NVIC_SetPriorityGrouping>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b086      	sub	sp, #24
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	4603      	mov	r3, r0
 8000a72:	60b9      	str	r1, [r7, #8]
 8000a74:	607a      	str	r2, [r7, #4]
 8000a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a7c:	f7ff ff5c 	bl	8000938 <__NVIC_GetPriorityGrouping>
 8000a80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	68b9      	ldr	r1, [r7, #8]
 8000a86:	6978      	ldr	r0, [r7, #20]
 8000a88:	f7ff ff8e 	bl	80009a8 <NVIC_EncodePriority>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a92:	4611      	mov	r1, r2
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff5d 	bl	8000954 <__NVIC_SetPriority>
}
 8000a9a:	bf00      	nop
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff ffb0 	bl	8000a10 <SysTick_Config>
 8000ab0:	4603      	mov	r3, r0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b087      	sub	sp, #28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aca:	e154      	b.n	8000d76 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f000 8146 	beq.w	8000d70 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d00b      	beq.n	8000b04 <HAL_GPIO_Init+0x48>
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d007      	beq.n	8000b04 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000af8:	2b11      	cmp	r3, #17
 8000afa:	d003      	beq.n	8000b04 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	2b12      	cmp	r3, #18
 8000b02:	d130      	bne.n	8000b66 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	2203      	movs	r2, #3
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	091b      	lsrs	r3, r3, #4
 8000b50:	f003 0201 	and.w	r2, r3, #1
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	2203      	movs	r2, #3
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_Init+0xea>
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	2b12      	cmp	r3, #18
 8000ba4:	d123      	bne.n	8000bee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	08da      	lsrs	r2, r3, #3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3208      	adds	r2, #8
 8000bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	220f      	movs	r2, #15
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	691a      	ldr	r2, [r3, #16]
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	f003 0307 	and.w	r3, r3, #7
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	08da      	lsrs	r2, r3, #3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3208      	adds	r2, #8
 8000be8:	6939      	ldr	r1, [r7, #16]
 8000bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4013      	ands	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 0203 	and.w	r2, r3, #3
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f000 80a0 	beq.w	8000d70 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c30:	4b58      	ldr	r3, [pc, #352]	; (8000d94 <HAL_GPIO_Init+0x2d8>)
 8000c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c34:	4a57      	ldr	r2, [pc, #348]	; (8000d94 <HAL_GPIO_Init+0x2d8>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	6613      	str	r3, [r2, #96]	; 0x60
 8000c3c:	4b55      	ldr	r3, [pc, #340]	; (8000d94 <HAL_GPIO_Init+0x2d8>)
 8000c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c48:	4a53      	ldr	r2, [pc, #332]	; (8000d98 <HAL_GPIO_Init+0x2dc>)
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	089b      	lsrs	r3, r3, #2
 8000c4e:	3302      	adds	r3, #2
 8000c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	f003 0303 	and.w	r3, r3, #3
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	220f      	movs	r2, #15
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c72:	d019      	beq.n	8000ca8 <HAL_GPIO_Init+0x1ec>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a49      	ldr	r2, [pc, #292]	; (8000d9c <HAL_GPIO_Init+0x2e0>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d013      	beq.n	8000ca4 <HAL_GPIO_Init+0x1e8>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a48      	ldr	r2, [pc, #288]	; (8000da0 <HAL_GPIO_Init+0x2e4>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d00d      	beq.n	8000ca0 <HAL_GPIO_Init+0x1e4>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a47      	ldr	r2, [pc, #284]	; (8000da4 <HAL_GPIO_Init+0x2e8>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d007      	beq.n	8000c9c <HAL_GPIO_Init+0x1e0>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a46      	ldr	r2, [pc, #280]	; (8000da8 <HAL_GPIO_Init+0x2ec>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d101      	bne.n	8000c98 <HAL_GPIO_Init+0x1dc>
 8000c94:	2304      	movs	r3, #4
 8000c96:	e008      	b.n	8000caa <HAL_GPIO_Init+0x1ee>
 8000c98:	2307      	movs	r3, #7
 8000c9a:	e006      	b.n	8000caa <HAL_GPIO_Init+0x1ee>
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	e004      	b.n	8000caa <HAL_GPIO_Init+0x1ee>
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	e002      	b.n	8000caa <HAL_GPIO_Init+0x1ee>
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e000      	b.n	8000caa <HAL_GPIO_Init+0x1ee>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	f002 0203 	and.w	r2, r2, #3
 8000cb0:	0092      	lsls	r2, r2, #2
 8000cb2:	4093      	lsls	r3, r2
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cba:	4937      	ldr	r1, [pc, #220]	; (8000d98 <HAL_GPIO_Init+0x2dc>)
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	089b      	lsrs	r3, r3, #2
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000cc8:	4b38      	ldr	r3, [pc, #224]	; (8000dac <HAL_GPIO_Init+0x2f0>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d003      	beq.n	8000cec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cec:	4a2f      	ldr	r2, [pc, #188]	; (8000dac <HAL_GPIO_Init+0x2f0>)
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000cf2:	4b2e      	ldr	r3, [pc, #184]	; (8000dac <HAL_GPIO_Init+0x2f0>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d003      	beq.n	8000d16 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d16:	4a25      	ldr	r2, [pc, #148]	; (8000dac <HAL_GPIO_Init+0x2f0>)
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d1c:	4b23      	ldr	r3, [pc, #140]	; (8000dac <HAL_GPIO_Init+0x2f0>)
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d40:	4a1a      	ldr	r2, [pc, #104]	; (8000dac <HAL_GPIO_Init+0x2f0>)
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <HAL_GPIO_Init+0x2f0>)
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d6a:	4a10      	ldr	r2, [pc, #64]	; (8000dac <HAL_GPIO_Init+0x2f0>)
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	3301      	adds	r3, #1
 8000d74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f47f aea3 	bne.w	8000acc <HAL_GPIO_Init+0x10>
  }
}
 8000d86:	bf00      	nop
 8000d88:	bf00      	nop
 8000d8a:	371c      	adds	r7, #28
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40010000 	.word	0x40010000
 8000d9c:	48000400 	.word	0x48000400
 8000da0:	48000800 	.word	0x48000800
 8000da4:	48000c00 	.word	0x48000c00
 8000da8:	48001000 	.word	0x48001000
 8000dac:	40010400 	.word	0x40010400

08000db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	807b      	strh	r3, [r7, #2]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dc0:	787b      	ldrb	r3, [r7, #1]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dc6:	887a      	ldrh	r2, [r7, #2]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dcc:	e002      	b.n	8000dd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dce:	887a      	ldrh	r2, [r7, #2]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40007000 	.word	0x40007000

08000dfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e0a:	d130      	bne.n	8000e6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e0c:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e18:	d038      	beq.n	8000e8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e1a:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e22:	4a1e      	ldr	r2, [pc, #120]	; (8000e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2232      	movs	r2, #50	; 0x32
 8000e30:	fb02 f303 	mul.w	r3, r2, r3
 8000e34:	4a1b      	ldr	r2, [pc, #108]	; (8000ea4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e36:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3a:	0c9b      	lsrs	r3, r3, #18
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e40:	e002      	b.n	8000e48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	3b01      	subs	r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e4a:	695b      	ldr	r3, [r3, #20]
 8000e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e54:	d102      	bne.n	8000e5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1f2      	bne.n	8000e42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e68:	d110      	bne.n	8000e8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e00f      	b.n	8000e8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e7a:	d007      	beq.n	8000e8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e84:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40007000 	.word	0x40007000
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	431bde83 	.word	0x431bde83

08000ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d102      	bne.n	8000ebc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	f000 bc11 	b.w	80016de <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ebc:	4ba0      	ldr	r3, [pc, #640]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f003 030c 	and.w	r3, r3, #12
 8000ec4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ec6:	4b9e      	ldr	r3, [pc, #632]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0310 	and.w	r3, r3, #16
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 80e4 	beq.w	80010a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d007      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x4c>
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	2b0c      	cmp	r3, #12
 8000ee8:	f040 808b 	bne.w	8001002 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	f040 8087 	bne.w	8001002 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ef4:	4b92      	ldr	r3, [pc, #584]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d005      	beq.n	8000f0c <HAL_RCC_OscConfig+0x64>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d101      	bne.n	8000f0c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e3e8      	b.n	80016de <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a1a      	ldr	r2, [r3, #32]
 8000f10:	4b8b      	ldr	r3, [pc, #556]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d004      	beq.n	8000f26 <HAL_RCC_OscConfig+0x7e>
 8000f1c:	4b88      	ldr	r3, [pc, #544]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f24:	e005      	b.n	8000f32 <HAL_RCC_OscConfig+0x8a>
 8000f26:	4b86      	ldr	r3, [pc, #536]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8000f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f2c:	091b      	lsrs	r3, r3, #4
 8000f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d223      	bcs.n	8000f7e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a1b      	ldr	r3, [r3, #32]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 fd42 	bl	80019c4 <RCC_SetFlashLatencyFromMSIRange>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e3c9      	b.n	80016de <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f4a:	4b7d      	ldr	r3, [pc, #500]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a7c      	ldr	r2, [pc, #496]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8000f50:	f043 0308 	orr.w	r3, r3, #8
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	4b7a      	ldr	r3, [pc, #488]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	4977      	ldr	r1, [pc, #476]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8000f64:	4313      	orrs	r3, r2
 8000f66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f68:	4b75      	ldr	r3, [pc, #468]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69db      	ldr	r3, [r3, #28]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	4972      	ldr	r1, [pc, #456]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	604b      	str	r3, [r1, #4]
 8000f7c:	e025      	b.n	8000fca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f7e:	4b70      	ldr	r3, [pc, #448]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a6f      	ldr	r2, [pc, #444]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8000f84:	f043 0308 	orr.w	r3, r3, #8
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	4b6d      	ldr	r3, [pc, #436]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	496a      	ldr	r1, [pc, #424]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f9c:	4b68      	ldr	r3, [pc, #416]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	4965      	ldr	r1, [pc, #404]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d109      	bne.n	8000fca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a1b      	ldr	r3, [r3, #32]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 fd02 	bl	80019c4 <RCC_SetFlashLatencyFromMSIRange>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e389      	b.n	80016de <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000fca:	f000 fc6f 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	4b5b      	ldr	r3, [pc, #364]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	091b      	lsrs	r3, r3, #4
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	495a      	ldr	r1, [pc, #360]	; (8001144 <HAL_RCC_OscConfig+0x29c>)
 8000fdc:	5ccb      	ldrb	r3, [r1, r3]
 8000fde:	f003 031f 	and.w	r3, r3, #31
 8000fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe6:	4a58      	ldr	r2, [pc, #352]	; (8001148 <HAL_RCC_OscConfig+0x2a0>)
 8000fe8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000fea:	4b58      	ldr	r3, [pc, #352]	; (800114c <HAL_RCC_OscConfig+0x2a4>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fbfe 	bl	80007f0 <HAL_InitTick>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d052      	beq.n	80010a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	e36d      	b.n	80016de <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d032      	beq.n	8001070 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800100a:	4b4d      	ldr	r3, [pc, #308]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a4c      	ldr	r2, [pc, #304]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001016:	f7ff fc3b 	bl	8000890 <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800101e:	f7ff fc37 	bl	8000890 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e356      	b.n	80016de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001030:	4b43      	ldr	r3, [pc, #268]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0f0      	beq.n	800101e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800103c:	4b40      	ldr	r3, [pc, #256]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a3f      	ldr	r2, [pc, #252]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8001042:	f043 0308 	orr.w	r3, r3, #8
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	493a      	ldr	r1, [pc, #232]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8001056:	4313      	orrs	r3, r2
 8001058:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800105a:	4b39      	ldr	r3, [pc, #228]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	4935      	ldr	r1, [pc, #212]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 800106a:	4313      	orrs	r3, r2
 800106c:	604b      	str	r3, [r1, #4]
 800106e:	e01a      	b.n	80010a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001070:	4b33      	ldr	r3, [pc, #204]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a32      	ldr	r2, [pc, #200]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8001076:	f023 0301 	bic.w	r3, r3, #1
 800107a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800107c:	f7ff fc08 	bl	8000890 <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001084:	f7ff fc04 	bl	8000890 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e323      	b.n	80016de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001096:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f0      	bne.n	8001084 <HAL_RCC_OscConfig+0x1dc>
 80010a2:	e000      	b.n	80010a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d073      	beq.n	800119a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	2b08      	cmp	r3, #8
 80010b6:	d005      	beq.n	80010c4 <HAL_RCC_OscConfig+0x21c>
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	2b0c      	cmp	r3, #12
 80010bc:	d10e      	bne.n	80010dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d10b      	bne.n	80010dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c4:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d063      	beq.n	8001198 <HAL_RCC_OscConfig+0x2f0>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d15f      	bne.n	8001198 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e300      	b.n	80016de <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e4:	d106      	bne.n	80010f4 <HAL_RCC_OscConfig+0x24c>
 80010e6:	4b16      	ldr	r3, [pc, #88]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a15      	ldr	r2, [pc, #84]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 80010ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e01d      	b.n	8001130 <HAL_RCC_OscConfig+0x288>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0x270>
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8001104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a0c      	ldr	r2, [pc, #48]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8001110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e00b      	b.n	8001130 <HAL_RCC_OscConfig+0x288>
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a08      	ldr	r2, [pc, #32]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 800111e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a05      	ldr	r2, [pc, #20]	; (8001140 <HAL_RCC_OscConfig+0x298>)
 800112a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d01b      	beq.n	8001170 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001138:	f7ff fbaa 	bl	8000890 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800113e:	e010      	b.n	8001162 <HAL_RCC_OscConfig+0x2ba>
 8001140:	40021000 	.word	0x40021000
 8001144:	08002acc 	.word	0x08002acc
 8001148:	20000000 	.word	0x20000000
 800114c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001150:	f7ff fb9e 	bl	8000890 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b64      	cmp	r3, #100	; 0x64
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e2bd      	b.n	80016de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001162:	4baf      	ldr	r3, [pc, #700]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0f0      	beq.n	8001150 <HAL_RCC_OscConfig+0x2a8>
 800116e:	e014      	b.n	800119a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001170:	f7ff fb8e 	bl	8000890 <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001178:	f7ff fb8a 	bl	8000890 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b64      	cmp	r3, #100	; 0x64
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e2a9      	b.n	80016de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800118a:	4ba5      	ldr	r3, [pc, #660]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f0      	bne.n	8001178 <HAL_RCC_OscConfig+0x2d0>
 8001196:	e000      	b.n	800119a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d060      	beq.n	8001268 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d005      	beq.n	80011b8 <HAL_RCC_OscConfig+0x310>
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	2b0c      	cmp	r3, #12
 80011b0:	d119      	bne.n	80011e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d116      	bne.n	80011e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011b8:	4b99      	ldr	r3, [pc, #612]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d005      	beq.n	80011d0 <HAL_RCC_OscConfig+0x328>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e286      	b.n	80016de <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d0:	4b93      	ldr	r3, [pc, #588]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	061b      	lsls	r3, r3, #24
 80011de:	4990      	ldr	r1, [pc, #576]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011e4:	e040      	b.n	8001268 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d023      	beq.n	8001236 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ee:	4b8c      	ldr	r3, [pc, #560]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a8b      	ldr	r2, [pc, #556]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 80011f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fa:	f7ff fb49 	bl	8000890 <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001202:	f7ff fb45 	bl	8000890 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e264      	b.n	80016de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001214:	4b82      	ldr	r3, [pc, #520]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0f0      	beq.n	8001202 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001220:	4b7f      	ldr	r3, [pc, #508]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	061b      	lsls	r3, r3, #24
 800122e:	497c      	ldr	r1, [pc, #496]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 8001230:	4313      	orrs	r3, r2
 8001232:	604b      	str	r3, [r1, #4]
 8001234:	e018      	b.n	8001268 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001236:	4b7a      	ldr	r3, [pc, #488]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a79      	ldr	r2, [pc, #484]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 800123c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001242:	f7ff fb25 	bl	8000890 <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800124a:	f7ff fb21 	bl	8000890 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e240      	b.n	80016de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800125c:	4b70      	ldr	r3, [pc, #448]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1f0      	bne.n	800124a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	2b00      	cmp	r3, #0
 8001272:	d03c      	beq.n	80012ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d01c      	beq.n	80012b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800127c:	4b68      	ldr	r3, [pc, #416]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 800127e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001282:	4a67      	ldr	r2, [pc, #412]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800128c:	f7ff fb00 	bl	8000890 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001294:	f7ff fafc 	bl	8000890 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e21b      	b.n	80016de <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012a6:	4b5e      	ldr	r3, [pc, #376]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 80012a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0ef      	beq.n	8001294 <HAL_RCC_OscConfig+0x3ec>
 80012b4:	e01b      	b.n	80012ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b6:	4b5a      	ldr	r3, [pc, #360]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 80012b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012bc:	4a58      	ldr	r2, [pc, #352]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 80012be:	f023 0301 	bic.w	r3, r3, #1
 80012c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c6:	f7ff fae3 	bl	8000890 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ce:	f7ff fadf 	bl	8000890 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e1fe      	b.n	80016de <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012e0:	4b4f      	ldr	r3, [pc, #316]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 80012e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1ef      	bne.n	80012ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 80a6 	beq.w	8001448 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012fc:	2300      	movs	r3, #0
 80012fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001300:	4b47      	ldr	r3, [pc, #284]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 8001302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d10d      	bne.n	8001328 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	4b44      	ldr	r3, [pc, #272]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 800130e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001310:	4a43      	ldr	r2, [pc, #268]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 8001312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001316:	6593      	str	r3, [r2, #88]	; 0x58
 8001318:	4b41      	ldr	r3, [pc, #260]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 800131a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001324:	2301      	movs	r3, #1
 8001326:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001328:	4b3e      	ldr	r3, [pc, #248]	; (8001424 <HAL_RCC_OscConfig+0x57c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001330:	2b00      	cmp	r3, #0
 8001332:	d118      	bne.n	8001366 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001334:	4b3b      	ldr	r3, [pc, #236]	; (8001424 <HAL_RCC_OscConfig+0x57c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a3a      	ldr	r2, [pc, #232]	; (8001424 <HAL_RCC_OscConfig+0x57c>)
 800133a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001340:	f7ff faa6 	bl	8000890 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001348:	f7ff faa2 	bl	8000890 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e1c1      	b.n	80016de <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800135a:	4b32      	ldr	r3, [pc, #200]	; (8001424 <HAL_RCC_OscConfig+0x57c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d108      	bne.n	8001380 <HAL_RCC_OscConfig+0x4d8>
 800136e:	4b2c      	ldr	r3, [pc, #176]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 8001370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001374:	4a2a      	ldr	r2, [pc, #168]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800137e:	e024      	b.n	80013ca <HAL_RCC_OscConfig+0x522>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b05      	cmp	r3, #5
 8001386:	d110      	bne.n	80013aa <HAL_RCC_OscConfig+0x502>
 8001388:	4b25      	ldr	r3, [pc, #148]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 800138a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800138e:	4a24      	ldr	r2, [pc, #144]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001398:	4b21      	ldr	r3, [pc, #132]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 800139a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800139e:	4a20      	ldr	r2, [pc, #128]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013a8:	e00f      	b.n	80013ca <HAL_RCC_OscConfig+0x522>
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 80013ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b0:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 80013b2:	f023 0301 	bic.w	r3, r3, #1
 80013b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 80013bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013c0:	4a17      	ldr	r2, [pc, #92]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 80013c2:	f023 0304 	bic.w	r3, r3, #4
 80013c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d016      	beq.n	8001400 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d2:	f7ff fa5d 	bl	8000890 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013d8:	e00a      	b.n	80013f0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013da:	f7ff fa59 	bl	8000890 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e176      	b.n	80016de <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_RCC_OscConfig+0x578>)
 80013f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0ed      	beq.n	80013da <HAL_RCC_OscConfig+0x532>
 80013fe:	e01a      	b.n	8001436 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001400:	f7ff fa46 	bl	8000890 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001406:	e00f      	b.n	8001428 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001408:	f7ff fa42 	bl	8000890 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	f241 3288 	movw	r2, #5000	; 0x1388
 8001416:	4293      	cmp	r3, r2
 8001418:	d906      	bls.n	8001428 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e15f      	b.n	80016de <HAL_RCC_OscConfig+0x836>
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000
 8001424:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001428:	4baa      	ldr	r3, [pc, #680]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 800142a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1e8      	bne.n	8001408 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001436:	7ffb      	ldrb	r3, [r7, #31]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d105      	bne.n	8001448 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800143c:	4ba5      	ldr	r3, [pc, #660]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 800143e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001440:	4aa4      	ldr	r2, [pc, #656]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 8001442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001446:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0320 	and.w	r3, r3, #32
 8001450:	2b00      	cmp	r3, #0
 8001452:	d03c      	beq.n	80014ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	2b00      	cmp	r3, #0
 800145a:	d01c      	beq.n	8001496 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800145c:	4b9d      	ldr	r3, [pc, #628]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 800145e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001462:	4a9c      	ldr	r2, [pc, #624]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800146c:	f7ff fa10 	bl	8000890 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001474:	f7ff fa0c 	bl	8000890 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e12b      	b.n	80016de <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001486:	4b93      	ldr	r3, [pc, #588]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 8001488:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0ef      	beq.n	8001474 <HAL_RCC_OscConfig+0x5cc>
 8001494:	e01b      	b.n	80014ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001496:	4b8f      	ldr	r3, [pc, #572]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 8001498:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800149c:	4a8d      	ldr	r2, [pc, #564]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 800149e:	f023 0301 	bic.w	r3, r3, #1
 80014a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a6:	f7ff f9f3 	bl	8000890 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014ae:	f7ff f9ef 	bl	8000890 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e10e      	b.n	80016de <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014c0:	4b84      	ldr	r3, [pc, #528]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 80014c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1ef      	bne.n	80014ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 8102 	beq.w	80016dc <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	2b02      	cmp	r3, #2
 80014de:	f040 80c5 	bne.w	800166c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014e2:	4b7c      	ldr	r3, [pc, #496]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f003 0203 	and.w	r2, r3, #3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d12c      	bne.n	8001550 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	3b01      	subs	r3, #1
 8001502:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001504:	429a      	cmp	r2, r3
 8001506:	d123      	bne.n	8001550 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001512:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001514:	429a      	cmp	r2, r3
 8001516:	d11b      	bne.n	8001550 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001522:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001524:	429a      	cmp	r2, r3
 8001526:	d113      	bne.n	8001550 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001532:	085b      	lsrs	r3, r3, #1
 8001534:	3b01      	subs	r3, #1
 8001536:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d109      	bne.n	8001550 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	085b      	lsrs	r3, r3, #1
 8001548:	3b01      	subs	r3, #1
 800154a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800154c:	429a      	cmp	r2, r3
 800154e:	d067      	beq.n	8001620 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2b0c      	cmp	r3, #12
 8001554:	d062      	beq.n	800161c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001556:	4b5f      	ldr	r3, [pc, #380]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e0bb      	b.n	80016de <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001566:	4b5b      	ldr	r3, [pc, #364]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a5a      	ldr	r2, [pc, #360]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 800156c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001570:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001572:	f7ff f98d 	bl	8000890 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157a:	f7ff f989 	bl	8000890 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e0a8      	b.n	80016de <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800158c:	4b51      	ldr	r3, [pc, #324]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f0      	bne.n	800157a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001598:	4b4e      	ldr	r3, [pc, #312]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	4b4e      	ldr	r3, [pc, #312]	; (80016d8 <HAL_RCC_OscConfig+0x830>)
 800159e:	4013      	ands	r3, r2
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015a8:	3a01      	subs	r2, #1
 80015aa:	0112      	lsls	r2, r2, #4
 80015ac:	4311      	orrs	r1, r2
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015b2:	0212      	lsls	r2, r2, #8
 80015b4:	4311      	orrs	r1, r2
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80015ba:	0852      	lsrs	r2, r2, #1
 80015bc:	3a01      	subs	r2, #1
 80015be:	0552      	lsls	r2, r2, #21
 80015c0:	4311      	orrs	r1, r2
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015c6:	0852      	lsrs	r2, r2, #1
 80015c8:	3a01      	subs	r2, #1
 80015ca:	0652      	lsls	r2, r2, #25
 80015cc:	4311      	orrs	r1, r2
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015d2:	06d2      	lsls	r2, r2, #27
 80015d4:	430a      	orrs	r2, r1
 80015d6:	493f      	ldr	r1, [pc, #252]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80015dc:	4b3d      	ldr	r3, [pc, #244]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a3c      	ldr	r2, [pc, #240]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 80015e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015e8:	4b3a      	ldr	r3, [pc, #232]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	4a39      	ldr	r2, [pc, #228]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 80015ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015f4:	f7ff f94c 	bl	8000890 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fc:	f7ff f948 	bl	8000890 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e067      	b.n	80016de <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800160e:	4b31      	ldr	r3, [pc, #196]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800161a:	e05f      	b.n	80016dc <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e05e      	b.n	80016de <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001620:	4b2c      	ldr	r3, [pc, #176]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d157      	bne.n	80016dc <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800162c:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a28      	ldr	r2, [pc, #160]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 8001632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001636:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001638:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	4a25      	ldr	r2, [pc, #148]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 800163e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001642:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001644:	f7ff f924 	bl	8000890 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164c:	f7ff f920 	bl	8000890 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e03f      	b.n	80016de <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800165e:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f0      	beq.n	800164c <HAL_RCC_OscConfig+0x7a4>
 800166a:	e037      	b.n	80016dc <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	2b0c      	cmp	r3, #12
 8001670:	d02d      	beq.n	80016ce <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a17      	ldr	r2, [pc, #92]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 8001678:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800167c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d105      	bne.n	8001696 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	4a11      	ldr	r2, [pc, #68]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 8001690:	f023 0303 	bic.w	r3, r3, #3
 8001694:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 800169c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80016a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a6:	f7ff f8f3 	bl	8000890 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ae:	f7ff f8ef 	bl	8000890 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e00e      	b.n	80016de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <HAL_RCC_OscConfig+0x82c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1f0      	bne.n	80016ae <HAL_RCC_OscConfig+0x806>
 80016cc:	e006      	b.n	80016dc <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e005      	b.n	80016de <HAL_RCC_OscConfig+0x836>
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000
 80016d8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3720      	adds	r7, #32
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop

080016e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0c8      	b.n	800188e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016fc:	4b66      	ldr	r3, [pc, #408]	; (8001898 <HAL_RCC_ClockConfig+0x1b0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d910      	bls.n	800172c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170a:	4b63      	ldr	r3, [pc, #396]	; (8001898 <HAL_RCC_ClockConfig+0x1b0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 0207 	bic.w	r2, r3, #7
 8001712:	4961      	ldr	r1, [pc, #388]	; (8001898 <HAL_RCC_ClockConfig+0x1b0>)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	4313      	orrs	r3, r2
 8001718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b5f      	ldr	r3, [pc, #380]	; (8001898 <HAL_RCC_ClockConfig+0x1b0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0b0      	b.n	800188e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d04c      	beq.n	80017d2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b03      	cmp	r3, #3
 800173e:	d107      	bne.n	8001750 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001740:	4b56      	ldr	r3, [pc, #344]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d121      	bne.n	8001790 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e09e      	b.n	800188e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b02      	cmp	r3, #2
 8001756:	d107      	bne.n	8001768 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001758:	4b50      	ldr	r3, [pc, #320]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d115      	bne.n	8001790 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e092      	b.n	800188e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d107      	bne.n	8001780 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001770:	4b4a      	ldr	r3, [pc, #296]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d109      	bne.n	8001790 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e086      	b.n	800188e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001780:	4b46      	ldr	r3, [pc, #280]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e07e      	b.n	800188e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001790:	4b42      	ldr	r3, [pc, #264]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f023 0203 	bic.w	r2, r3, #3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	493f      	ldr	r1, [pc, #252]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017a2:	f7ff f875 	bl	8000890 <HAL_GetTick>
 80017a6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a8:	e00a      	b.n	80017c0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017aa:	f7ff f871 	bl	8000890 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e066      	b.n	800188e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c0:	4b36      	ldr	r3, [pc, #216]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 020c 	and.w	r2, r3, #12
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d1eb      	bne.n	80017aa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d008      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017de:	4b2f      	ldr	r3, [pc, #188]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	492c      	ldr	r1, [pc, #176]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017f0:	4b29      	ldr	r3, [pc, #164]	; (8001898 <HAL_RCC_ClockConfig+0x1b0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d210      	bcs.n	8001820 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	4b26      	ldr	r3, [pc, #152]	; (8001898 <HAL_RCC_ClockConfig+0x1b0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 0207 	bic.w	r2, r3, #7
 8001806:	4924      	ldr	r1, [pc, #144]	; (8001898 <HAL_RCC_ClockConfig+0x1b0>)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180e:	4b22      	ldr	r3, [pc, #136]	; (8001898 <HAL_RCC_ClockConfig+0x1b0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d001      	beq.n	8001820 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e036      	b.n	800188e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d008      	beq.n	800183e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4918      	ldr	r1, [pc, #96]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d009      	beq.n	800185e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800184a:	4b14      	ldr	r3, [pc, #80]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	4910      	ldr	r1, [pc, #64]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800185e:	f000 f825 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8001862:	4602      	mov	r2, r0
 8001864:	4b0d      	ldr	r3, [pc, #52]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	490c      	ldr	r1, [pc, #48]	; (80018a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001870:	5ccb      	ldrb	r3, [r1, r3]
 8001872:	f003 031f 	and.w	r3, r3, #31
 8001876:	fa22 f303 	lsr.w	r3, r2, r3
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe ffb4 	bl	80007f0 <HAL_InitTick>
 8001888:	4603      	mov	r3, r0
 800188a:	72fb      	strb	r3, [r7, #11]

  return status;
 800188c:	7afb      	ldrb	r3, [r7, #11]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40022000 	.word	0x40022000
 800189c:	40021000 	.word	0x40021000
 80018a0:	08002acc 	.word	0x08002acc
 80018a4:	20000000 	.word	0x20000000
 80018a8:	20000004 	.word	0x20000004

080018ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ba:	4b3e      	ldr	r3, [pc, #248]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018c4:	4b3b      	ldr	r3, [pc, #236]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x34>
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	2b0c      	cmp	r3, #12
 80018d8:	d121      	bne.n	800191e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d11e      	bne.n	800191e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018e0:	4b34      	ldr	r3, [pc, #208]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0308 	and.w	r3, r3, #8
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d107      	bne.n	80018fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80018ec:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f2:	0a1b      	lsrs	r3, r3, #8
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	61fb      	str	r3, [r7, #28]
 80018fa:	e005      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018fc:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001908:	4a2b      	ldr	r2, [pc, #172]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001910:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10d      	bne.n	8001934 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800191c:	e00a      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	2b04      	cmp	r3, #4
 8001922:	d102      	bne.n	800192a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001924:	4b25      	ldr	r3, [pc, #148]	; (80019bc <HAL_RCC_GetSysClockFreq+0x110>)
 8001926:	61bb      	str	r3, [r7, #24]
 8001928:	e004      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2b08      	cmp	r3, #8
 800192e:	d101      	bne.n	8001934 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001930:	4b23      	ldr	r3, [pc, #140]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001932:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	2b0c      	cmp	r3, #12
 8001938:	d134      	bne.n	80019a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800193a:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d003      	beq.n	8001952 <HAL_RCC_GetSysClockFreq+0xa6>
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d003      	beq.n	8001958 <HAL_RCC_GetSysClockFreq+0xac>
 8001950:	e005      	b.n	800195e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001952:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <HAL_RCC_GetSysClockFreq+0x110>)
 8001954:	617b      	str	r3, [r7, #20]
      break;
 8001956:	e005      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800195a:	617b      	str	r3, [r7, #20]
      break;
 800195c:	e002      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	617b      	str	r3, [r7, #20]
      break;
 8001962:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	3301      	adds	r3, #1
 8001970:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	0a1b      	lsrs	r3, r3, #8
 8001978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	fb02 f203 	mul.w	r2, r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	fbb2 f3f3 	udiv	r3, r2, r3
 8001988:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	0e5b      	lsrs	r3, r3, #25
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	3301      	adds	r3, #1
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80019a4:	69bb      	ldr	r3, [r7, #24]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3724      	adds	r7, #36	; 0x24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000
 80019b8:	08002adc 	.word	0x08002adc
 80019bc:	00f42400 	.word	0x00f42400
 80019c0:	007a1200 	.word	0x007a1200

080019c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019cc:	2300      	movs	r3, #0
 80019ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019d0:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019dc:	f7ff fa00 	bl	8000de0 <HAL_PWREx_GetVoltageRange>
 80019e0:	6178      	str	r0, [r7, #20]
 80019e2:	e014      	b.n	8001a0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019e4:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e8:	4a24      	ldr	r2, [pc, #144]	; (8001a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ee:	6593      	str	r3, [r2, #88]	; 0x58
 80019f0:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80019fc:	f7ff f9f0 	bl	8000de0 <HAL_PWREx_GetVoltageRange>
 8001a00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a06:	4a1d      	ldr	r2, [pc, #116]	; (8001a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a14:	d10b      	bne.n	8001a2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b80      	cmp	r3, #128	; 0x80
 8001a1a:	d919      	bls.n	8001a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2ba0      	cmp	r3, #160	; 0xa0
 8001a20:	d902      	bls.n	8001a28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a22:	2302      	movs	r3, #2
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	e013      	b.n	8001a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a28:	2301      	movs	r3, #1
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	e010      	b.n	8001a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b80      	cmp	r3, #128	; 0x80
 8001a32:	d902      	bls.n	8001a3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a34:	2303      	movs	r3, #3
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	e00a      	b.n	8001a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b80      	cmp	r3, #128	; 0x80
 8001a3e:	d102      	bne.n	8001a46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a40:	2302      	movs	r3, #2
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	e004      	b.n	8001a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b70      	cmp	r3, #112	; 0x70
 8001a4a:	d101      	bne.n	8001a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f023 0207 	bic.w	r2, r3, #7
 8001a58:	4909      	ldr	r1, [pc, #36]	; (8001a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d001      	beq.n	8001a72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40022000 	.word	0x40022000

08001a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e049      	b.n	8001b2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7fe fdaa 	bl	8000604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3304      	adds	r3, #4
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	f000 fb4a 	bl	800215c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e049      	b.n	8001bd8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d106      	bne.n	8001b5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f841 	bl	8001be0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2202      	movs	r2, #2
 8001b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4610      	mov	r0, r2
 8001b72:	f000 faf3 	bl	800215c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d109      	bne.n	8001c18 <HAL_TIM_PWM_Start+0x24>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	bf14      	ite	ne
 8001c10:	2301      	movne	r3, #1
 8001c12:	2300      	moveq	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	e03c      	b.n	8001c92 <HAL_TIM_PWM_Start+0x9e>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d109      	bne.n	8001c32 <HAL_TIM_PWM_Start+0x3e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	bf14      	ite	ne
 8001c2a:	2301      	movne	r3, #1
 8001c2c:	2300      	moveq	r3, #0
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	e02f      	b.n	8001c92 <HAL_TIM_PWM_Start+0x9e>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d109      	bne.n	8001c4c <HAL_TIM_PWM_Start+0x58>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	bf14      	ite	ne
 8001c44:	2301      	movne	r3, #1
 8001c46:	2300      	moveq	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	e022      	b.n	8001c92 <HAL_TIM_PWM_Start+0x9e>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	2b0c      	cmp	r3, #12
 8001c50:	d109      	bne.n	8001c66 <HAL_TIM_PWM_Start+0x72>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	bf14      	ite	ne
 8001c5e:	2301      	movne	r3, #1
 8001c60:	2300      	moveq	r3, #0
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	e015      	b.n	8001c92 <HAL_TIM_PWM_Start+0x9e>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b10      	cmp	r3, #16
 8001c6a:	d109      	bne.n	8001c80 <HAL_TIM_PWM_Start+0x8c>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	bf14      	ite	ne
 8001c78:	2301      	movne	r3, #1
 8001c7a:	2300      	moveq	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	e008      	b.n	8001c92 <HAL_TIM_PWM_Start+0x9e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	bf14      	ite	ne
 8001c8c:	2301      	movne	r3, #1
 8001c8e:	2300      	moveq	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e07e      	b.n	8001d98 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d104      	bne.n	8001caa <HAL_TIM_PWM_Start+0xb6>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ca8:	e023      	b.n	8001cf2 <HAL_TIM_PWM_Start+0xfe>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d104      	bne.n	8001cba <HAL_TIM_PWM_Start+0xc6>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cb8:	e01b      	b.n	8001cf2 <HAL_TIM_PWM_Start+0xfe>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d104      	bne.n	8001cca <HAL_TIM_PWM_Start+0xd6>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cc8:	e013      	b.n	8001cf2 <HAL_TIM_PWM_Start+0xfe>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b0c      	cmp	r3, #12
 8001cce:	d104      	bne.n	8001cda <HAL_TIM_PWM_Start+0xe6>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001cd8:	e00b      	b.n	8001cf2 <HAL_TIM_PWM_Start+0xfe>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b10      	cmp	r3, #16
 8001cde:	d104      	bne.n	8001cea <HAL_TIM_PWM_Start+0xf6>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ce8:	e003      	b.n	8001cf2 <HAL_TIM_PWM_Start+0xfe>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2202      	movs	r2, #2
 8001cee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	6839      	ldr	r1, [r7, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fdaa 	bl	8002854 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a26      	ldr	r2, [pc, #152]	; (8001da0 <HAL_TIM_PWM_Start+0x1ac>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d009      	beq.n	8001d1e <HAL_TIM_PWM_Start+0x12a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a25      	ldr	r2, [pc, #148]	; (8001da4 <HAL_TIM_PWM_Start+0x1b0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d004      	beq.n	8001d1e <HAL_TIM_PWM_Start+0x12a>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a23      	ldr	r2, [pc, #140]	; (8001da8 <HAL_TIM_PWM_Start+0x1b4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d101      	bne.n	8001d22 <HAL_TIM_PWM_Start+0x12e>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <HAL_TIM_PWM_Start+0x130>
 8001d22:	2300      	movs	r3, #0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d007      	beq.n	8001d38 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d36:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a18      	ldr	r2, [pc, #96]	; (8001da0 <HAL_TIM_PWM_Start+0x1ac>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d009      	beq.n	8001d56 <HAL_TIM_PWM_Start+0x162>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d4a:	d004      	beq.n	8001d56 <HAL_TIM_PWM_Start+0x162>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <HAL_TIM_PWM_Start+0x1b0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d115      	bne.n	8001d82 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	4b13      	ldr	r3, [pc, #76]	; (8001dac <HAL_TIM_PWM_Start+0x1b8>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2b06      	cmp	r3, #6
 8001d66:	d015      	beq.n	8001d94 <HAL_TIM_PWM_Start+0x1a0>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6e:	d011      	beq.n	8001d94 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0201 	orr.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d80:	e008      	b.n	8001d94 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	e000      	b.n	8001d96 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40012c00 	.word	0x40012c00
 8001da4:	40014000 	.word	0x40014000
 8001da8:	40014400 	.word	0x40014400
 8001dac:	00010007 	.word	0x00010007

08001db0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d101      	bne.n	8001dca <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e0fd      	b.n	8001fc6 <HAL_TIM_PWM_ConfigChannel+0x216>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b14      	cmp	r3, #20
 8001dd6:	f200 80f0 	bhi.w	8001fba <HAL_TIM_PWM_ConfigChannel+0x20a>
 8001dda:	a201      	add	r2, pc, #4	; (adr r2, 8001de0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de0:	08001e35 	.word	0x08001e35
 8001de4:	08001fbb 	.word	0x08001fbb
 8001de8:	08001fbb 	.word	0x08001fbb
 8001dec:	08001fbb 	.word	0x08001fbb
 8001df0:	08001e75 	.word	0x08001e75
 8001df4:	08001fbb 	.word	0x08001fbb
 8001df8:	08001fbb 	.word	0x08001fbb
 8001dfc:	08001fbb 	.word	0x08001fbb
 8001e00:	08001eb7 	.word	0x08001eb7
 8001e04:	08001fbb 	.word	0x08001fbb
 8001e08:	08001fbb 	.word	0x08001fbb
 8001e0c:	08001fbb 	.word	0x08001fbb
 8001e10:	08001ef7 	.word	0x08001ef7
 8001e14:	08001fbb 	.word	0x08001fbb
 8001e18:	08001fbb 	.word	0x08001fbb
 8001e1c:	08001fbb 	.word	0x08001fbb
 8001e20:	08001f39 	.word	0x08001f39
 8001e24:	08001fbb 	.word	0x08001fbb
 8001e28:	08001fbb 	.word	0x08001fbb
 8001e2c:	08001fbb 	.word	0x08001fbb
 8001e30:	08001f79 	.word	0x08001f79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f9f2 	bl	8002224 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699a      	ldr	r2, [r3, #24]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0208 	orr.w	r2, r2, #8
 8001e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	699a      	ldr	r2, [r3, #24]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0204 	bic.w	r2, r2, #4
 8001e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6999      	ldr	r1, [r3, #24]
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	619a      	str	r2, [r3, #24]
      break;
 8001e72:	e0a3      	b.n	8001fbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 fa4e 	bl	800231c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699a      	ldr	r2, [r3, #24]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699a      	ldr	r2, [r3, #24]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6999      	ldr	r1, [r3, #24]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	021a      	lsls	r2, r3, #8
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	619a      	str	r2, [r3, #24]
      break;
 8001eb4:	e082      	b.n	8001fbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68b9      	ldr	r1, [r7, #8]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 faa7 	bl	8002410 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	69da      	ldr	r2, [r3, #28]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 0208 	orr.w	r2, r2, #8
 8001ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	69da      	ldr	r2, [r3, #28]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0204 	bic.w	r2, r2, #4
 8001ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69d9      	ldr	r1, [r3, #28]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	61da      	str	r2, [r3, #28]
      break;
 8001ef4:	e062      	b.n	8001fbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68b9      	ldr	r1, [r7, #8]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 faff 	bl	8002500 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	69da      	ldr	r2, [r3, #28]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	69da      	ldr	r2, [r3, #28]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	69d9      	ldr	r1, [r3, #28]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	021a      	lsls	r2, r3, #8
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	61da      	str	r2, [r3, #28]
      break;
 8001f36:	e041      	b.n	8001fbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 fb3c 	bl	80025bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0208 	orr.w	r2, r2, #8
 8001f52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0204 	bic.w	r2, r2, #4
 8001f62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001f76:	e021      	b.n	8001fbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 fb74 	bl	800266c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fa2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	021a      	lsls	r2, r3, #8
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001fb8:	e000      	b.n	8001fbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8001fba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop

08001fd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_TIM_ConfigClockSource+0x18>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e0b5      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x184>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002006:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800200a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002012:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002024:	d03e      	beq.n	80020a4 <HAL_TIM_ConfigClockSource+0xd4>
 8002026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800202a:	f200 8087 	bhi.w	800213c <HAL_TIM_ConfigClockSource+0x16c>
 800202e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002032:	f000 8085 	beq.w	8002140 <HAL_TIM_ConfigClockSource+0x170>
 8002036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800203a:	d87f      	bhi.n	800213c <HAL_TIM_ConfigClockSource+0x16c>
 800203c:	2b70      	cmp	r3, #112	; 0x70
 800203e:	d01a      	beq.n	8002076 <HAL_TIM_ConfigClockSource+0xa6>
 8002040:	2b70      	cmp	r3, #112	; 0x70
 8002042:	d87b      	bhi.n	800213c <HAL_TIM_ConfigClockSource+0x16c>
 8002044:	2b60      	cmp	r3, #96	; 0x60
 8002046:	d050      	beq.n	80020ea <HAL_TIM_ConfigClockSource+0x11a>
 8002048:	2b60      	cmp	r3, #96	; 0x60
 800204a:	d877      	bhi.n	800213c <HAL_TIM_ConfigClockSource+0x16c>
 800204c:	2b50      	cmp	r3, #80	; 0x50
 800204e:	d03c      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0xfa>
 8002050:	2b50      	cmp	r3, #80	; 0x50
 8002052:	d873      	bhi.n	800213c <HAL_TIM_ConfigClockSource+0x16c>
 8002054:	2b40      	cmp	r3, #64	; 0x40
 8002056:	d058      	beq.n	800210a <HAL_TIM_ConfigClockSource+0x13a>
 8002058:	2b40      	cmp	r3, #64	; 0x40
 800205a:	d86f      	bhi.n	800213c <HAL_TIM_ConfigClockSource+0x16c>
 800205c:	2b30      	cmp	r3, #48	; 0x30
 800205e:	d064      	beq.n	800212a <HAL_TIM_ConfigClockSource+0x15a>
 8002060:	2b30      	cmp	r3, #48	; 0x30
 8002062:	d86b      	bhi.n	800213c <HAL_TIM_ConfigClockSource+0x16c>
 8002064:	2b20      	cmp	r3, #32
 8002066:	d060      	beq.n	800212a <HAL_TIM_ConfigClockSource+0x15a>
 8002068:	2b20      	cmp	r3, #32
 800206a:	d867      	bhi.n	800213c <HAL_TIM_ConfigClockSource+0x16c>
 800206c:	2b00      	cmp	r3, #0
 800206e:	d05c      	beq.n	800212a <HAL_TIM_ConfigClockSource+0x15a>
 8002070:	2b10      	cmp	r3, #16
 8002072:	d05a      	beq.n	800212a <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002074:	e062      	b.n	800213c <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	6899      	ldr	r1, [r3, #8]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f000 fbc5 	bl	8002814 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002098:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	609a      	str	r2, [r3, #8]
      break;
 80020a2:	e04e      	b.n	8002142 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	6899      	ldr	r1, [r3, #8]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f000 fbae 	bl	8002814 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020c6:	609a      	str	r2, [r3, #8]
      break;
 80020c8:	e03b      	b.n	8002142 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6859      	ldr	r1, [r3, #4]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	461a      	mov	r2, r3
 80020d8:	f000 fb22 	bl	8002720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2150      	movs	r1, #80	; 0x50
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 fb7b 	bl	80027de <TIM_ITRx_SetConfig>
      break;
 80020e8:	e02b      	b.n	8002142 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	6859      	ldr	r1, [r3, #4]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	461a      	mov	r2, r3
 80020f8:	f000 fb41 	bl	800277e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2160      	movs	r1, #96	; 0x60
 8002102:	4618      	mov	r0, r3
 8002104:	f000 fb6b 	bl	80027de <TIM_ITRx_SetConfig>
      break;
 8002108:	e01b      	b.n	8002142 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	6859      	ldr	r1, [r3, #4]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	461a      	mov	r2, r3
 8002118:	f000 fb02 	bl	8002720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2140      	movs	r1, #64	; 0x40
 8002122:	4618      	mov	r0, r3
 8002124:	f000 fb5b 	bl	80027de <TIM_ITRx_SetConfig>
      break;
 8002128:	e00b      	b.n	8002142 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4619      	mov	r1, r3
 8002134:	4610      	mov	r0, r2
 8002136:	f000 fb52 	bl	80027de <TIM_ITRx_SetConfig>
        break;
 800213a:	e002      	b.n	8002142 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800213c:	bf00      	nop
 800213e:	e000      	b.n	8002142 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8002140:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a2a      	ldr	r2, [pc, #168]	; (8002218 <TIM_Base_SetConfig+0xbc>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d003      	beq.n	800217c <TIM_Base_SetConfig+0x20>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800217a:	d108      	bne.n	800218e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a21      	ldr	r2, [pc, #132]	; (8002218 <TIM_Base_SetConfig+0xbc>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00b      	beq.n	80021ae <TIM_Base_SetConfig+0x52>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800219c:	d007      	beq.n	80021ae <TIM_Base_SetConfig+0x52>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a1e      	ldr	r2, [pc, #120]	; (800221c <TIM_Base_SetConfig+0xc0>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d003      	beq.n	80021ae <TIM_Base_SetConfig+0x52>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a1d      	ldr	r2, [pc, #116]	; (8002220 <TIM_Base_SetConfig+0xc4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d108      	bne.n	80021c0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a0c      	ldr	r2, [pc, #48]	; (8002218 <TIM_Base_SetConfig+0xbc>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d007      	beq.n	80021fc <TIM_Base_SetConfig+0xa0>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a0b      	ldr	r2, [pc, #44]	; (800221c <TIM_Base_SetConfig+0xc0>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d003      	beq.n	80021fc <TIM_Base_SetConfig+0xa0>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <TIM_Base_SetConfig+0xc4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d103      	bne.n	8002204 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	691a      	ldr	r2, [r3, #16]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	615a      	str	r2, [r3, #20]
}
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40012c00 	.word	0x40012c00
 800221c:	40014000 	.word	0x40014000
 8002220:	40014400 	.word	0x40014400

08002224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	f023 0201 	bic.w	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f023 0303 	bic.w	r3, r3, #3
 800225e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f023 0302 	bic.w	r3, r3, #2
 8002270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4313      	orrs	r3, r2
 800227a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a24      	ldr	r2, [pc, #144]	; (8002310 <TIM_OC1_SetConfig+0xec>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d007      	beq.n	8002294 <TIM_OC1_SetConfig+0x70>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a23      	ldr	r2, [pc, #140]	; (8002314 <TIM_OC1_SetConfig+0xf0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d003      	beq.n	8002294 <TIM_OC1_SetConfig+0x70>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a22      	ldr	r2, [pc, #136]	; (8002318 <TIM_OC1_SetConfig+0xf4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d10c      	bne.n	80022ae <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f023 0308 	bic.w	r3, r3, #8
 800229a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f023 0304 	bic.w	r3, r3, #4
 80022ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a17      	ldr	r2, [pc, #92]	; (8002310 <TIM_OC1_SetConfig+0xec>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d007      	beq.n	80022c6 <TIM_OC1_SetConfig+0xa2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a16      	ldr	r2, [pc, #88]	; (8002314 <TIM_OC1_SetConfig+0xf0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d003      	beq.n	80022c6 <TIM_OC1_SetConfig+0xa2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a15      	ldr	r2, [pc, #84]	; (8002318 <TIM_OC1_SetConfig+0xf4>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d111      	bne.n	80022ea <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	621a      	str	r2, [r3, #32]
}
 8002304:	bf00      	nop
 8002306:	371c      	adds	r7, #28
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	40012c00 	.word	0x40012c00
 8002314:	40014000 	.word	0x40014000
 8002318:	40014400 	.word	0x40014400

0800231c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	f023 0210 	bic.w	r2, r3, #16
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800234a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800234e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f023 0320 	bic.w	r3, r3, #32
 800236a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4313      	orrs	r3, r2
 8002376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a22      	ldr	r2, [pc, #136]	; (8002404 <TIM_OC2_SetConfig+0xe8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d10d      	bne.n	800239c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4313      	orrs	r3, r2
 8002392:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800239a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a19      	ldr	r2, [pc, #100]	; (8002404 <TIM_OC2_SetConfig+0xe8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d007      	beq.n	80023b4 <TIM_OC2_SetConfig+0x98>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a18      	ldr	r2, [pc, #96]	; (8002408 <TIM_OC2_SetConfig+0xec>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d003      	beq.n	80023b4 <TIM_OC2_SetConfig+0x98>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a17      	ldr	r2, [pc, #92]	; (800240c <TIM_OC2_SetConfig+0xf0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d113      	bne.n	80023dc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	621a      	str	r2, [r3, #32]
}
 80023f6:	bf00      	nop
 80023f8:	371c      	adds	r7, #28
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40012c00 	.word	0x40012c00
 8002408:	40014000 	.word	0x40014000
 800240c:	40014400 	.word	0x40014400

08002410 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f023 0303 	bic.w	r3, r3, #3
 800244a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800245c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	021b      	lsls	r3, r3, #8
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	4313      	orrs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a21      	ldr	r2, [pc, #132]	; (80024f4 <TIM_OC3_SetConfig+0xe4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d10d      	bne.n	800248e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002478:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	4313      	orrs	r3, r2
 8002484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800248c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a18      	ldr	r2, [pc, #96]	; (80024f4 <TIM_OC3_SetConfig+0xe4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d007      	beq.n	80024a6 <TIM_OC3_SetConfig+0x96>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a17      	ldr	r2, [pc, #92]	; (80024f8 <TIM_OC3_SetConfig+0xe8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d003      	beq.n	80024a6 <TIM_OC3_SetConfig+0x96>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a16      	ldr	r2, [pc, #88]	; (80024fc <TIM_OC3_SetConfig+0xec>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d113      	bne.n	80024ce <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	621a      	str	r2, [r3, #32]
}
 80024e8:	bf00      	nop
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	40012c00 	.word	0x40012c00
 80024f8:	40014000 	.word	0x40014000
 80024fc:	40014400 	.word	0x40014400

08002500 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002500:	b480      	push	{r7}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800252e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800253a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	021b      	lsls	r3, r3, #8
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800254e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	031b      	lsls	r3, r3, #12
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <TIM_OC4_SetConfig+0xb0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d007      	beq.n	8002574 <TIM_OC4_SetConfig+0x74>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a13      	ldr	r2, [pc, #76]	; (80025b4 <TIM_OC4_SetConfig+0xb4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d003      	beq.n	8002574 <TIM_OC4_SetConfig+0x74>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a12      	ldr	r2, [pc, #72]	; (80025b8 <TIM_OC4_SetConfig+0xb8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d109      	bne.n	8002588 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800257a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	019b      	lsls	r3, r3, #6
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4313      	orrs	r3, r2
 8002586:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	621a      	str	r2, [r3, #32]
}
 80025a2:	bf00      	nop
 80025a4:	371c      	adds	r7, #28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40012c00 	.word	0x40012c00
 80025b4:	40014000 	.word	0x40014000
 80025b8:	40014400 	.word	0x40014400

080025bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002600:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	041b      	lsls	r3, r3, #16
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a13      	ldr	r2, [pc, #76]	; (8002660 <TIM_OC5_SetConfig+0xa4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d007      	beq.n	8002626 <TIM_OC5_SetConfig+0x6a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a12      	ldr	r2, [pc, #72]	; (8002664 <TIM_OC5_SetConfig+0xa8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d003      	beq.n	8002626 <TIM_OC5_SetConfig+0x6a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a11      	ldr	r2, [pc, #68]	; (8002668 <TIM_OC5_SetConfig+0xac>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d109      	bne.n	800263a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	4313      	orrs	r3, r2
 8002638:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	621a      	str	r2, [r3, #32]
}
 8002654:	bf00      	nop
 8002656:	371c      	adds	r7, #28
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	40012c00 	.word	0x40012c00
 8002664:	40014000 	.word	0x40014000
 8002668:	40014400 	.word	0x40014400

0800266c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800269a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800269e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	021b      	lsls	r3, r3, #8
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	051b      	lsls	r3, r3, #20
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a14      	ldr	r2, [pc, #80]	; (8002714 <TIM_OC6_SetConfig+0xa8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d007      	beq.n	80026d8 <TIM_OC6_SetConfig+0x6c>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a13      	ldr	r2, [pc, #76]	; (8002718 <TIM_OC6_SetConfig+0xac>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d003      	beq.n	80026d8 <TIM_OC6_SetConfig+0x6c>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a12      	ldr	r2, [pc, #72]	; (800271c <TIM_OC6_SetConfig+0xb0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d109      	bne.n	80026ec <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	029b      	lsls	r3, r3, #10
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	621a      	str	r2, [r3, #32]
}
 8002706:	bf00      	nop
 8002708:	371c      	adds	r7, #28
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40012c00 	.word	0x40012c00
 8002718:	40014000 	.word	0x40014000
 800271c:	40014400 	.word	0x40014400

08002720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	f023 0201 	bic.w	r2, r3, #1
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800274a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f023 030a 	bic.w	r3, r3, #10
 800275c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	4313      	orrs	r3, r2
 8002764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	621a      	str	r2, [r3, #32]
}
 8002772:	bf00      	nop
 8002774:	371c      	adds	r7, #28
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800277e:	b480      	push	{r7}
 8002780:	b087      	sub	sp, #28
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	f023 0210 	bic.w	r2, r3, #16
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	031b      	lsls	r3, r3, #12
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	621a      	str	r2, [r3, #32]
}
 80027d2:	bf00      	nop
 80027d4:	371c      	adds	r7, #28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027de:	b480      	push	{r7}
 80027e0:	b085      	sub	sp, #20
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f043 0307 	orr.w	r3, r3, #7
 8002800:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	609a      	str	r2, [r3, #8]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800282e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	021a      	lsls	r2, r3, #8
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	431a      	orrs	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4313      	orrs	r3, r2
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	4313      	orrs	r3, r2
 8002840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	609a      	str	r2, [r3, #8]
}
 8002848:	bf00      	nop
 800284a:	371c      	adds	r7, #28
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f003 031f 	and.w	r3, r3, #31
 8002866:	2201      	movs	r2, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a1a      	ldr	r2, [r3, #32]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	43db      	mvns	r3, r3
 8002876:	401a      	ands	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a1a      	ldr	r2, [r3, #32]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	fa01 f303 	lsl.w	r3, r1, r3
 800288c:	431a      	orrs	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	621a      	str	r2, [r3, #32]
}
 8002892:	bf00      	nop
 8002894:	371c      	adds	r7, #28
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e04f      	b.n	8002958 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a21      	ldr	r2, [pc, #132]	; (8002964 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d108      	bne.n	80028f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80028e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a14      	ldr	r2, [pc, #80]	; (8002964 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d009      	beq.n	800292c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002920:	d004      	beq.n	800292c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a10      	ldr	r2, [pc, #64]	; (8002968 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d10c      	bne.n	8002946 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002932:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	4313      	orrs	r3, r2
 800293c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	40012c00 	.word	0x40012c00
 8002968:	40014000 	.word	0x40014000

0800296c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002984:	2302      	movs	r3, #2
 8002986:	e060      	b.n	8002a4a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	041b      	lsls	r3, r3, #16
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a14      	ldr	r2, [pc, #80]	; (8002a58 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d115      	bne.n	8002a38 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	051b      	lsls	r3, r3, #20
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40012c00 	.word	0x40012c00

08002a5c <__libc_init_array>:
 8002a5c:	b570      	push	{r4, r5, r6, lr}
 8002a5e:	4d0d      	ldr	r5, [pc, #52]	; (8002a94 <__libc_init_array+0x38>)
 8002a60:	4c0d      	ldr	r4, [pc, #52]	; (8002a98 <__libc_init_array+0x3c>)
 8002a62:	1b64      	subs	r4, r4, r5
 8002a64:	10a4      	asrs	r4, r4, #2
 8002a66:	2600      	movs	r6, #0
 8002a68:	42a6      	cmp	r6, r4
 8002a6a:	d109      	bne.n	8002a80 <__libc_init_array+0x24>
 8002a6c:	4d0b      	ldr	r5, [pc, #44]	; (8002a9c <__libc_init_array+0x40>)
 8002a6e:	4c0c      	ldr	r4, [pc, #48]	; (8002aa0 <__libc_init_array+0x44>)
 8002a70:	f000 f820 	bl	8002ab4 <_init>
 8002a74:	1b64      	subs	r4, r4, r5
 8002a76:	10a4      	asrs	r4, r4, #2
 8002a78:	2600      	movs	r6, #0
 8002a7a:	42a6      	cmp	r6, r4
 8002a7c:	d105      	bne.n	8002a8a <__libc_init_array+0x2e>
 8002a7e:	bd70      	pop	{r4, r5, r6, pc}
 8002a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a84:	4798      	blx	r3
 8002a86:	3601      	adds	r6, #1
 8002a88:	e7ee      	b.n	8002a68 <__libc_init_array+0xc>
 8002a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a8e:	4798      	blx	r3
 8002a90:	3601      	adds	r6, #1
 8002a92:	e7f2      	b.n	8002a7a <__libc_init_array+0x1e>
 8002a94:	08002b0c 	.word	0x08002b0c
 8002a98:	08002b0c 	.word	0x08002b0c
 8002a9c:	08002b0c 	.word	0x08002b0c
 8002aa0:	08002b10 	.word	0x08002b10

08002aa4 <memset>:
 8002aa4:	4402      	add	r2, r0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d100      	bne.n	8002aae <memset+0xa>
 8002aac:	4770      	bx	lr
 8002aae:	f803 1b01 	strb.w	r1, [r3], #1
 8002ab2:	e7f9      	b.n	8002aa8 <memset+0x4>

08002ab4 <_init>:
 8002ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab6:	bf00      	nop
 8002ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aba:	bc08      	pop	{r3}
 8002abc:	469e      	mov	lr, r3
 8002abe:	4770      	bx	lr

08002ac0 <_fini>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	bf00      	nop
 8002ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac6:	bc08      	pop	{r3}
 8002ac8:	469e      	mov	lr, r3
 8002aca:	4770      	bx	lr
